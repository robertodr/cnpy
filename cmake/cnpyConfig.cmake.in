# cnpyConfig.cmake
# ---------------------
#
# cnpy cmake module.
# This module sets the following variables in your project:
#
# ::
#
#   cnpy_FOUND - true if cnpy and all required components found on the system
#   cnpy_VERSION - cnpy version in format Major.Minor.Release
#   cnpy_INCLUDE_DIRS - Directory where cnpy/cnpy.h header is located.
#   cnpy_INCLUDE_DIR - same as DIRS
#   cnpy_DEFINITIONS: Definitions necessary to use cnpy, namely USING_cnpy.
#   cnpy_LIBRARIES - cnpy library to link against.
#   cnpy_LIBRARY - same as LIBRARIES
#
#
# Available components: shared static
#
# ::
#
#   shared - search for only shared library
#   static - search for only static library
#
#
# Exported targets:
#
# ::
#
# If cnpy is found, this module defines the following :prop_tgt:`IMPORTED`
# target. ::
#
#   cnpy::cnpy - the main cnpy library with header & defs attached.
#
#
# Suggested usage:
#
# ::
#
#   find_package(cnpy)
#   find_package(cnpy 1.1.7 CONFIG REQUIRED COMPONENTS shared)
#
#
# The following variables can be set to guide the search for this package:
#
# ::
#
#   cnpy_DIR - CMake variable, set to directory containing this Config file
#   CMAKE_PREFIX_PATH - CMake variable, set to root directory of this package
#   PATH - environment variable, set to bin directory of this package
#   CMAKE_DISABLE_FIND_PACKAGE_cnpy - CMake variable, disables
#       find_package(cnpy) perhaps to force internal build

@PACKAGE_INIT@

set(PN cnpy)
set (_valid_components
    static
    shared
)

# find includes
unset(_temp_h CACHE)
find_path(_temp_h
          NAMES cnpy/cnpy.h
          PATHS ${PACKAGE_PREFIX_DIR}/@CMAKE_INSTALL_INCLUDEDIR@
          NO_DEFAULT_PATH)
if(_temp_h)
    set(${PN}_INCLUDE_DIR "${_temp_h}")
    set(${PN}_INCLUDE_DIRS ${${PN}_INCLUDE_DIR})
else()
    set(${PN}_FOUND 0)
    if(NOT CMAKE_REQUIRED_QUIET)
        message(STATUS "${PN}Config missing component: header (${PN}: ${_temp_h})")
    endif()
endif()

# find library: shared, static, or whichever
set(_hold_library_suffixes ${CMAKE_FIND_LIBRARY_SUFFIXES})
list(FIND ${PN}_FIND_COMPONENTS "shared" _seek_shared)
list(FIND ${PN}_FIND_COMPONENTS "static" _seek_static)
if(_seek_shared GREATER -1)
    set(CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_SHARED_LIBRARY_SUFFIX})
elseif(_seek_static GREATER -1)
    set(CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_STATIC_LIBRARY_SUFFIX})
endif()
unset(_temp CACHE)
find_library(_temp
             NAMES cnpy
             PATHS ${PACKAGE_PREFIX_DIR}/@CMAKE_INSTALL_LIBDIR@
             NO_DEFAULT_PATH)
if(_temp)
    set(${PN}_LIBRARY "${_temp}")
    if(_seek_shared GREATER -1)
        set(${PN}_shared_FOUND 1)
    elseif(_seek_static GREATER -1)
        set(${PN}_static_FOUND 1)
    endif()
else()
    if(_seek_shared GREATER -1)
        if(NOT CMAKE_REQUIRED_QUIET)
            message(STATUS "${PN}Config missing component: shared library (${PN}: ${_temp})")
        endif()
    elseif(_seek_static GREATER -1)
        if(NOT CMAKE_REQUIRED_QUIET)
            message(STATUS "${PN}Config missing component: static library (${PN}: ${_temp})")
        endif()
    else()
        set(${PN}_FOUND 0)
        if(NOT CMAKE_REQUIRED_QUIET)
            message(STATUS "${PN}Config missing component: library (${PN}: ${_temp})")
        endif()
    endif()
endif()
set(CMAKE_FIND_LIBRARY_SUFFIXES ${_hold_library_suffixes})
set(${PN}_LIBRARIES ${${PN}_LIBRARY})
set(${PN}_DEFINITIONS USING_${PN})

check_required_components(${PN})

#-----------------------------------------------------------------------------
# Don't include targets if this file is being picked up by another
# project which has already built this as a subproject
#-----------------------------------------------------------------------------
if(NOT TARGET ${PN}::cnpy)
    get_filename_component(_fext ${${PN}_LIBRARY} EXT)
    if(${_fext} STREQUAL ${CMAKE_SHARED_LIBRARY_SUFFIX})
        include("${CMAKE_CURRENT_LIST_DIR}/${PN}Targets-shared.cmake")
    else()
        include("${CMAKE_CURRENT_LIST_DIR}/${PN}Targets-static.cmake")
    endif()

    include(CMakeFindDependencyMacro)
    if(NOT TARGET ZLIB::ZLIB)
        find_dependency(ZLIB)
    endif()
endif()
